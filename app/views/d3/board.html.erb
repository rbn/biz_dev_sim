<style>

text {
  fill: white;
  font: 16px sans-serif;
}

</style>
<div id="modal_content" style="display:none">ksaljdasdas</div>


<div id="svg_container">
</div>
<div id="dbg"></div>

<script>
d3.selection.prototype.moveToFront = function() {
  return this.each(function(){
    this.parentNode.appendChild(this);
  });
};

var $dbg = $('#dbg');

var freeze = false;

var diameter = 960,
    format = d3.format(",d"),
    color = d3.scale.category20c();

var bubble = d3.layout.pack()
    .sort(null)
    .size([diameter, diameter])
    .padding(1.5);

var svg = d3.select("#svg_container").append("svg")
    .attr("width", diameter)
    .attr("height", diameter)
    .attr("class", "bubble");

d3.json("/board_data", function(error, root) {
  var node = svg.selectAll(".node")
      .data(bubble.nodes(classes(root), function(d) { return d.name; })
      .filter(function(d) { return !d.children; }))
      .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { 
        return "translate(" + d.x + "," + d.y + ")"; 
      });

  node.append("title")
      .text(function(d) { return d.className + ": " + format(d.value); });

  node.append("circle")
      .attr("r", function(d) { return d.r; })
      .style("fill", function(d) { return 'black'; fill_circ(d); });
        
  node.append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .text(function(d) { return d.className.substring(0, d.r / 3); });

  node.on('mouseover', function() { 
        if (freeze) return;
        d3.select(this).moveToFront(); 
    });

  node.append("div")
      .attr('class', 'modal_content')
      .text(function(d) {
        var msg = "(eventually get data from server)</br>"
        msg += d.className + ": " + format(d.value);
        return msg;
      });

  node.selectAll('circle')
  .on('mouseover', function(d) {
    if (freeze) return;

   node.selectAll('circle')
      .attr("r", function(d) { return d.r; })
      .style("fill", function(d) { return fill_circ(d); });

     d3.select(this)
     .attr('r', function(d) { return 1.5*d.r; });
     })
     .on('click', function(d) {
       if (!freeze) {
         freeze = true;
       }
       else {
         freeze = false;
         node.selectAll('circle')
          .attr("r", function(d) { return d.r; })
          .style("fill", function(d) { return fill_circ(d); });

         d3.select(this)
         .attr('r', function(d) { return 1.5*d.r; });

        d3.select(this.parentNode).moveToFront();
       }

      var modal_message = node.selectAll('div').text();
      var $modal = $('#modal_content');
      $modal.load('board_data');
      $modal.modal({
        onClose: function(dialog) {
          freeze = false; 
          $.modal.close();
        }
      });
    });

  node.selectAll('text').on('click', function(d) {
      var modal_message = node.selectAll('div').text();
      var $modal = $('#modal_content');
      $modal.load('board_data');
      $modal.modal({
        onClose: function(dialog) {
          freeze = false; 
          $.modal.close();
        }
      });
  });

});

function fill_circ(d) { 
  var factor = Math.round(d.x) % 255,
      h1 = Math.round(factor * 10 % 220),
      h2 = Math.round(factor * 10 % 110),
      h3 = factor
  return 'rgb(' + h1 + ',' + h2 + ',' + h3 + ')'; 
}


// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
  var classes = [];

  function recurse(name, node) {
    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
    else classes.push({packageName: name, className: node.name, value: node.size});
  }

  recurse(null, root);
  return {children: classes};
}

d3.select(self.frameElement).style("height", diameter + "px");
</script>
